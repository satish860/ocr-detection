name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
    tags:
      - 'v*'  # Trigger on version tags like v0.1.0
  pull_request:
    branches: [ master, main ]
  release:
    types: [published]

jobs:
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Run Ruff linter
      run: |
        uv run ruff check src/ tests/ --output-format=github
    
    - name: Run Ruff formatter check
      run: |
        uv run ruff format src/ tests/ --check
    
    - name: Run type checking with MyPy
      run: |
        uv run mypy src/
  
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.13"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Run tests with pytest
      run: |
        uv run pytest tests/ -v --tb=short
    
    - name: Test CLI
      run: |
        uv run ocr-detect --help
    
    - name: Run tests with coverage (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        uv add --dev pytest-cov
        uv run pytest tests/ --cov=ocr_detection --cov-report=term-missing --cov-report=xml
    
    - name: Upload coverage to Codecov (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    
    - name: Install uv
      uses: astral-sh/setup-uv@v5
    
    - name: Build package
      run: |
        uv build
    
    - name: Check distribution
      run: |
        uv add --dev twine
        uv run twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/

  publish-to-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/ocr-detection
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/ocr-detection
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-to-pypi]
    if: github.event_name == 'release'
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/
    
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        fail_on_unmatched_files: true